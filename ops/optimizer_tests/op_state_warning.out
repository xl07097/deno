#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_listen::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_listen;
#[doc(hidden)]
impl op_listen {
    pub const fn name() -> &'static str {
        stringify!(op_listen)
    }
    #[allow(clippy::not_unsafe_ptr_arg_deref)]
    pub extern "C" fn v8_fn_ptr<'scope>(
        info: *const deno_core::v8::FunctionCallbackInfo,
    ) {
        let info = unsafe { &*info };
        let scope = &mut unsafe { deno_core::v8::CallbackScope::new(info) };
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
            info,
        );
        let rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
        Self::v8_func(scope, args, rv);
    }
    pub const fn decl<'scope>() -> deno_core::OpDecl {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr as _,
            enabled: true,
            fast_fn: {
                use deno_core::v8::fast_api::Type::*;
                use deno_core::v8::fast_api::CType;
                Some(
                    deno_core::v8::fast_api::FastFunction::new(
                        &[V8Value, CallbackOptions],
                        CType::Uint32,
                        op_listen_fast_fn as *const ::std::ffi::c_void,
                    ),
                )
            },
            is_async: false,
            is_unstable: false,
            is_v8: false,
            force_registration: false,
            arg_count: 0usize as u8,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    fn call(state: &mut OpState) -> Result<ResourceId, Error> {
        log::debug!("listen");
        let addr = "127.0.0.1:4570".parse::<SocketAddr>().unwrap();
        let std_listener = std::net::TcpListener::bind(&addr)?;
        std_listener.set_nonblocking(true)?;
        let listener = TcpListener::try_from(std_listener)?;
        let rid = state.resource_table.add(listener);
        Ok(rid)
    }
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        {
            let op_state = &mut std::cell::RefCell::borrow_mut(&ctx.state);
            if let Some(err) = op_state.last_fast_op_error.take() {
                let exception = deno_core::error::to_v8_error(
                    scope,
                    op_state.get_error_class_fn,
                    &err,
                );
                scope.throw_exception(exception);
                return;
            }
        }
        let result = Self::call(&mut std::cell::RefCell::borrow_mut(&ctx.state));
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
        match result {
            Ok(result) => {
                match deno_core::serde_v8::to_v8(scope, result) {
                    Ok(ret) => rv.set(ret),
                    Err(err) => {
                        deno_core::_ops::throw_type_error(
                            scope,
                            format!(
                                "Error serializing return: {}",
                                deno_core::anyhow::Error::from(err)
                            ),
                        )
                    }
                };
            }
            Err(err) => {
                let exception = deno_core::error::to_v8_error(
                    scope,
                    op_state.get_error_class_fn,
                    &err,
                );
                scope.throw_exception(exception);
            }
        };
    }
}
#[allow(clippy::too_many_arguments)]
fn op_listen_fast_fn<'scope>(
    _: deno_core::v8::Local<deno_core::v8::Object>,
    fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
) -> u32 {
    use deno_core::v8;
    use deno_core::_ops;
    let __opts: &mut v8::fast_api::FastApiCallbackOptions = unsafe {
        &mut *fast_api_callback_options
    };
    let __ctx = unsafe {
        &*(v8::Local::<v8::External>::cast(unsafe { __opts.data.data }).value()
            as *const _ops::OpCtx)
    };
    let state = &mut ::std::cell::RefCell::borrow_mut(&__ctx.state);
    let result = op_listen::call(state);
    match result {
        Ok(result) => result,
        Err(err) => {
            state.last_fast_op_error.replace(err);
            __opts.fallback = true;
            Default::default()
        }
    }
}
