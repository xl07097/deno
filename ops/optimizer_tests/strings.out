#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_string_length::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_string_length;
#[doc(hidden)]
impl op_string_length {
    pub const fn name() -> &'static str {
        stringify!(op_string_length)
    }
    #[allow(clippy::not_unsafe_ptr_arg_deref)]
    pub extern "C" fn v8_fn_ptr<'scope>(
        info: *const deno_core::v8::FunctionCallbackInfo,
    ) {
        let info = unsafe { &*info };
        let scope = &mut unsafe { deno_core::v8::CallbackScope::new(info) };
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
            info,
        );
        let rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
        Self::v8_func(scope, args, rv);
    }
    pub const fn decl<'scope>() -> deno_core::OpDecl {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr as _,
            enabled: true,
            fast_fn: {
                use deno_core::v8::fast_api::Type::*;
                use deno_core::v8::fast_api::CType;
                Some(
                    deno_core::v8::fast_api::FastFunction::new(
                        &[V8Value, SeqOneByteString, CallbackOptions],
                        CType::Uint32,
                        op_string_length_fast_fn as *const ::std::ffi::c_void,
                    ),
                )
            },
            is_async: false,
            is_unstable: false,
            is_v8: false,
            force_registration: false,
            arg_count: 1usize as u8,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    fn call(string: &str) -> u32 {
        string.len() as u32
    }
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let arg_0 = match deno_core::v8::Local::<
            deno_core::v8::String,
        >::try_from(args.get(0usize as i32)) {
            Ok(v8_string) => deno_core::serde_v8::to_utf8(v8_string, scope),
            Err(_) => {
                return deno_core::_ops::throw_type_error(
                    scope,
                    format!("Expected string at position {}", 0usize),
                );
            }
        };
        let arg_0 = arg_0.as_ref();
        let result = Self::call(arg_0);
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
        match deno_core::serde_v8::to_v8(scope, result) {
            Ok(ret) => rv.set(ret),
            Err(err) => {
                deno_core::_ops::throw_type_error(
                    scope,
                    format!(
                        "Error serializing return: {}",
                        deno_core::anyhow::Error::from(err)
                    ),
                )
            }
        };
    }
}
#[allow(clippy::too_many_arguments)]
fn op_string_length_fast_fn<'scope>(
    _: deno_core::v8::Local<deno_core::v8::Object>,
    string: *const deno_core::v8::fast_api::FastApiOneByteString,
    fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
) -> u32 {
    use deno_core::v8;
    use deno_core::_ops;
    let string = match ::std::str::from_utf8(unsafe { &*string }.as_bytes()) {
        Ok(v) => v,
        Err(_) => {
            unsafe { &mut *fast_api_callback_options }.fallback = true;
            return Default::default();
        }
    };
    let result = op_string_length::call(string);
    result
}
