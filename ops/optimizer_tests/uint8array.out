#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_import_spki_x25519::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_import_spki_x25519;
#[doc(hidden)]
impl op_import_spki_x25519 {
    pub const fn name() -> &'static str {
        stringify!(op_import_spki_x25519)
    }
    #[allow(clippy::not_unsafe_ptr_arg_deref)]
    pub extern "C" fn v8_fn_ptr<'scope>(
        info: *const deno_core::v8::FunctionCallbackInfo,
    ) {
        let info = unsafe { &*info };
        let scope = &mut unsafe { deno_core::v8::CallbackScope::new(info) };
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
            info,
        );
        let rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
        Self::v8_func(scope, args, rv);
    }
    pub const fn decl<'scope>() -> deno_core::OpDecl {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr as _,
            enabled: true,
            fast_fn: {
                use deno_core::v8::fast_api::Type::*;
                use deno_core::v8::fast_api::CType;
                Some(
                    deno_core::v8::fast_api::FastFunction::new(
                        &[V8Value, TypedArray(CType::Uint8), TypedArray(CType::Uint8)],
                        CType::Bool,
                        op_import_spki_x25519_fast_fn as *const ::std::ffi::c_void,
                    ),
                )
            },
            is_async: false,
            is_unstable: false,
            is_v8: false,
            force_registration: false,
            arg_count: 2usize as u8,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    pub fn call(key_data: &[u8], out: &mut [u8]) -> bool {}
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let arg_0 = {
            let value = args.get(0usize as i32);
            match deno_core::v8::Local::<deno_core::v8::ArrayBuffer>::try_from(value) {
                Ok(b) => {
                    let byte_length = b.byte_length();
                    if let Some(data) = b.data() {
                        let store = data.cast::<u8>().as_ptr();
                        unsafe { ::std::slice::from_raw_parts_mut(store, byte_length) }
                    } else {
                        &mut []
                    }
                }
                Err(_) => {
                    if let Ok(view)
                        = deno_core::v8::Local::<
                            deno_core::v8::ArrayBufferView,
                        >::try_from(value) {
                        let len = view.byte_length();
                        let offset = view.byte_offset();
                        let buffer = match view.buffer(scope) {
                            Some(v) => v,
                            None => {
                                return deno_core::_ops::throw_type_error(
                                    scope,
                                    format!("Expected ArrayBufferView at position {}", 0usize),
                                );
                            }
                        };
                        if let Some(data) = buffer.data() {
                            let store = data.cast::<u8>().as_ptr();
                            unsafe {
                                ::std::slice::from_raw_parts_mut(store.add(offset), len)
                            }
                        } else {
                            &mut []
                        }
                    } else {
                        return deno_core::_ops::throw_type_error(
                            scope,
                            format!("Expected ArrayBufferView at position {}", 0usize),
                        );
                    }
                }
            }
        };
        let arg_1 = {
            let value = args.get(1usize as i32);
            match deno_core::v8::Local::<deno_core::v8::ArrayBuffer>::try_from(value) {
                Ok(b) => {
                    let byte_length = b.byte_length();
                    if let Some(data) = b.data() {
                        let store = data.cast::<u8>().as_ptr();
                        unsafe { ::std::slice::from_raw_parts_mut(store, byte_length) }
                    } else {
                        &mut []
                    }
                }
                Err(_) => {
                    if let Ok(view)
                        = deno_core::v8::Local::<
                            deno_core::v8::ArrayBufferView,
                        >::try_from(value) {
                        let len = view.byte_length();
                        let offset = view.byte_offset();
                        let buffer = match view.buffer(scope) {
                            Some(v) => v,
                            None => {
                                return deno_core::_ops::throw_type_error(
                                    scope,
                                    format!("Expected ArrayBufferView at position {}", 1usize),
                                );
                            }
                        };
                        if let Some(data) = buffer.data() {
                            let store = data.cast::<u8>().as_ptr();
                            unsafe {
                                ::std::slice::from_raw_parts_mut(store.add(offset), len)
                            }
                        } else {
                            &mut []
                        }
                    } else {
                        return deno_core::_ops::throw_type_error(
                            scope,
                            format!("Expected ArrayBufferView at position {}", 1usize),
                        );
                    }
                }
            }
        };
        let result = Self::call(arg_0, arg_1);
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
        match deno_core::serde_v8::to_v8(scope, result) {
            Ok(ret) => rv.set(ret),
            Err(err) => {
                deno_core::_ops::throw_type_error(
                    scope,
                    format!(
                        "Error serializing return: {}",
                        deno_core::anyhow::Error::from(err)
                    ),
                )
            }
        };
    }
}
#[allow(clippy::too_many_arguments)]
fn op_import_spki_x25519_fast_fn<'scope>(
    _: deno_core::v8::Local<deno_core::v8::Object>,
    key_data: *const deno_core::v8::fast_api::FastApiTypedArray<u8>,
    out: *const deno_core::v8::fast_api::FastApiTypedArray<u8>,
) -> bool {
    use deno_core::v8;
    use deno_core::_ops;
    let key_data = unsafe { (&*key_data).get_storage_if_aligned().unwrap_unchecked() };
    let out = unsafe { (&*out).get_storage_if_aligned().unwrap_unchecked() };
    let result = op_import_spki_x25519::call(key_data, out);
    result
}
