#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_try_close::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_try_close;
#[doc(hidden)]
impl op_try_close {
    pub const fn name() -> &'static str {
        stringify!(op_try_close)
    }
    #[allow(clippy::not_unsafe_ptr_arg_deref)]
    pub extern "C" fn v8_fn_ptr<'scope>(
        info: *const deno_core::v8::FunctionCallbackInfo,
    ) {
        let info = unsafe { &*info };
        let scope = &mut unsafe { deno_core::v8::CallbackScope::new(info) };
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
            info,
        );
        let rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
        Self::v8_func(scope, args, rv);
    }
    pub const fn decl<'scope>() -> deno_core::OpDecl {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr as _,
            enabled: true,
            fast_fn: None,
            is_async: false,
            is_unstable: false,
            is_v8: false,
            force_registration: false,
            arg_count: 1usize as u8,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    pub fn call(state: &mut OpState, rid: Option<ResourceId>) -> Result<(), Error> {}
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let arg_0 = args.get(0usize as i32);
        let arg_0 = match deno_core::serde_v8::from_v8(scope, arg_0) {
            Ok(v) => v,
            Err(err) => {
                let msg = format!(
                    "Error parsing args at position {}: {}", 0usize,
                    deno_core::anyhow::Error::from(err)
                );
                return deno_core::_ops::throw_type_error(scope, msg);
            }
        };
        let result = Self::call(&mut std::cell::RefCell::borrow_mut(&ctx.state), arg_0);
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
        match result {
            Ok(result) => {}
            Err(err) => {
                let exception = deno_core::error::to_v8_error(
                    scope,
                    op_state.get_error_class_fn,
                    &err,
                );
                scope.throw_exception(exception);
            }
        };
    }
}
